name: Python CI

on:
  push:
    branches:
      - main
      - develop
      - feature/*
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      
    - name: Notify Slack - Inicio del pipeline üöÄ
      run: |
        curl -X POST -H 'Content-type: application/json' \--data '{"text":"üîÑ Se inici√≥ un nuevo pipeline de CI para ${{ github.repository }} en la rama ${{ github.ref_name }}"}' \${{ secrets.SLACK_WEBHOOK }}

      
    - name: Checkout code
      uses: actions/checkout@v4

      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

      
    - name: Install Poetry
      run: |
        pip install poetry

    - name: Install dependencies with Poetry
      run: |
        poetry install

      
    - name: Run tests
      id: test_step
      run: |
        poetry run pytest

    - name: Lint with flake8
      id: lint_step
      run: |
        poetry run flake8 .

  containerization:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write   

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  # üëà Esto tambi√©n es CLAVE

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
          file: ./Dockerfile
      
  Deploy:
    needs: containerization
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deploy Hook
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

  Notify-Slack-Failure:
    needs: build
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: Notify Slack - ‚ùå Fallaron los tests
      run: |
        curl -X POST -H 'Content-type: application/json' \--data '{"text":"‚ùå Fallo en los tests en ${{ github.ref_name }}. Revisa los logs en GitHub Actions üîç"}' \${{ secrets.SLACK_WEBHOOK }}

  Notify-Slack-Success:
    needs: build
    if: success()
    runs-on: ubuntu-latest
    steps:      
    - name: Notify Slack - ‚úÖ Tests pasaron exitosamente
      run: |
        curl -X POST -H 'Content-type: application/json' \--data '{"text":"‚úÖ Tests pasaron exitosamente en ${{ github.ref_name }}. Todo est√° en orden üéâ"}' \${{ secrets.SLACK_WEBHOOK }}

  Notify-Slack-Pipeline:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:  
    - name: Notify Slack - Pipeline completado üèÅ
      run: |
        curl -X POST -H 'Content-type: application/json' \--data '{"text":"üìù Pipeline finalizado para ${{ github.ref_name }}. Ver estado completo en: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \${{ secrets.SLACK_WEBHOOK }}